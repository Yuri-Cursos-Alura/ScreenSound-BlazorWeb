@page "/EditarArtista/{ArtistName}"
@inject ArtistaAPI api
@inject NavigationManager navigationManager

<MudPaper Class="px-8 py-8">
    @if (Artist is not null)
    {
        <MudText Typo="Typo.h4">Edição de @Artist.Nome</MudText>

        <MudForm>
            <MudTextField T="string" Placeholder="Nome do Artista"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="Campo obrigatório."
                          @bind-Value="Name" />

            <MudTextField T="string" Placeholder="Biografia do Artista"
                          Variant="Variant.Outlined"
                          Lines="4"
                          Required="true"
                          RequiredError="Campo obrigatório."
                          @bind-Value="Bio" />

            <MudDivider Class="my-4" />

            <div>
                <MudButton @onclick="DeleteAsync"
                           Variant="Variant.Filled"
                           Color="Color.Secondary">
                    Deletar
                </MudButton>
            </div>

        </MudForm>
    }
    else
    {
        <div class="w-100 h-100 d-flex align-items-center justify-content-center">
            <MudText Typo="Typo.h4">Este artista não existe :&lt</MudText>
        </div>
    }
</MudPaper>

@code {
    private string? Name;
    private string? Bio;

    [Parameter]
    public string ArtistName { get; set; } = "";
    public ArtistaResponse? Artist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Artist = await api.GetArtistaByNameAsync(ArtistName);
        Name = Artist?.Nome;
        Bio = Artist?.Bio;
    }

    private async Task DeleteAsync()
    {
        if (Artist is null) return;
        await api.DeleteArtistaAsync(Artist!.Id);
        navigationManager.NavigateTo("/Artistas");
    }
}